local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local OrionLib = {}

-- The MakeWindow function will return the window object and store a reference in the wrapper
function OrionLib:MakeWindow(config)
    local windowConfig = {
        Name = config.Name or "Default Name",
        DisableRayfieldPrompts = false,
        DisableBuildWarnings = false,
        SaveConfig = config.SaveConfig or false,
        ConfigurationSaving = {
            Enabled = true,
            FolderName = nil, 
            FileName = config.ConfigFolder or "DefaultFolder",
        },
        LoadingTitle = config.IntroText or "",
        Icon = 0,
        KeySystem = false,
    }

    -- Create the window using Rayfield
    local window = Rayfield:CreateWindow(windowConfig)
    
    -- Return a wrapper for the window to allow method chaining
    return setmetatable({
        Window = window
    }, {
        __index = function(_, key)
            -- Redirect method calls to the window instance
            return function(_, ...)
                if key == "MakeTab" then
                    -- Ensure MakeTab calls CreateTab on the window
                    return window:CreateTab(...)
                else
                    return window[key](window, ...)
                end
            end
        end
    })
end

-- This allows creating tabs directly on the window object
function OrionLib:MakeTab(config)
    local window = self.Window  -- Get the window object from the instance
    return window:CreateTab(config.Name)
end

-- This allows creating sections on a tab
function OrionLib:AddSection(tab, config)
    return tab:CreateSection(config.Name)
end

function OrionLib:AddButton(tab, config)
    tab:CreateButton({
        Name = config.Name,
        Callback = config.Callback
    })
end

function OrionLib:AddToggle(tab, config)
    tab:CreateToggle({
        Name = config.Name,
        CurrentValue = config.Default or false,
        Flag = config.Flag or config.Name,
        Callback = config.Callback
    })
end

function OrionLib:AddColorpicker(tab, config)
    tab:CreateColorpicker({
        Name = config.Name,
        Default = config.Default or Color3.fromRGB(255, 255, 255),
        Callback = config.Callback
    })
end

function OrionLib:AddSlider(tab, config)
    tab:CreateSlider({
        Name = config.Name,
        Range = {config.Min or 0, config.Max or 100},
        Increment = config.Increment or 1,
        Suffix = config.ValueName or "",
        CurrentValue = config.Default or 0,
        Flag = config.Flag or config.Name,
        Callback = config.Callback
    })
end

function OrionLib:AddLabel(tab, text)
    tab:CreateLabel(text)
end

function OrionLib:AddParagraph(tab, config)
    tab:CreateParagraph(config.Name, config.Content)
end

function OrionLib:AddTextbox(tab, config)
    tab:CreateInput({
        Name = config.Name,
        Default = config.Default or "",
        TextDisappear = config.TextDisappear or false,
        Callback = config.Callback
    })
end

function OrionLib:AddKeybind(tab, config)
    tab:CreateKeybind({
        Name = config.Name,
        CurrentKeybind = config.Default or Enum.KeyCode.E,
        HoldToInteract = config.Hold or false,
        Flag = config.Flag or config.Name,
        Callback = config.Callback
    })
end

function OrionLib:AddDropdown(tab, config)
    tab:CreateDropdown({
        Name = config.Name,
        Options = config.Options or {},
        CurrentOption = config.Default or config.Options[1],
        Flag = config.Flag or config.Name,
        Callback = config.Callback
    })
end

function OrionLib:MakeNotification(config)
    Rayfield:Notify({
        Title = config.Name,
        Content = config.Content,
        Image = config.Image,
        Duration = config.Time
    })
end

function OrionLib:Init()
    Rayfield:Init()
end

function OrionLib:Destroy()
    Rayfield:Destroy()
end

return OrionLib
