local OrionToRayfield = {}

-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create a window (Orion-like syntax)
function OrionToRayfield:MakeWindow(options)
    local window = Rayfield:CreateWindow({
        Name = options.Name or "OrionToRayfield",
        Icon = 0, -- Default icon
        LoadingTitle = options.Name or "OrionToRayfield",
        LoadingSubtitle = options.IntroText or "by OrionToRayfield",
        Theme = "Default", -- Maybe add theme options later
        ConfigurationSaving = {
            Enabled = options.SaveConfig or false,
            FolderName = options.ConfigFolder,
            FileName = "config.json"
        },
        Discord = {
            Enabled = false,
            Invite = "noinvitelink",
            RememberJoins = true
        },
        KeySystem = false,
        IntroEnabled = options.IntroEnabled or false,
        DisableRayfieldPrompts = false,
        DisableBuildWarnings = true
    })

    local windowWrapper = {}

    -- Create a tab (Orion-like syntax)
    function windowWrapper:MakeTab(options)
        local tab = window:CreateTab(options.Name, 4483345998) -- Using Rayfield syntax
        local tabWrapper = {}

        -- Add a section (Orion-like syntax)
        function tabWrapper:AddSection(options)
            local section = tab:CreateSection(options.Name)
            return tabWrapper -- Return the tab wrapper to allow chaining
        end

        -- Add a button (Orion-like syntax)
        function tabWrapper:AddButton(options)
            tab:CreateButton({
                Name = options.Name,
                Callback = options.Callback
            })
            return tabWrapper -- Return the tab wrapper to allow chaining
        end

        -- Add a toggle (Orion-like syntax)
        function tabWrapper:AddToggle(options)
            local toggle = tab:CreateToggle({
                Name = options.Name,
                CurrentValue = options.Default or false,
                Flag = options.Flag or options.Name .. "Toggle",
                Save = options.Save,
                Callback = options.Callback
            })
            
            -- Add Set method to the toggle
            toggle.Set = function(_, value)
                toggle:Set(value)
            end
            
            return toggle
        end

        -- Add a slider (Orion-like syntax)
        function tabWrapper:AddSlider(options)
            local slider = tab:CreateSlider({
                Name = options.Name,
                Range = {options.Min, options.Max},
                Increment = options.Increment or 1,
                Suffix = options.ValueName or "",
                CurrentValue = options.Default or options.Min,
                Flag = options.Flag or options.Name .. "Slider",
                Save = options.Save,
                Callback = options.Callback
            })
            
            -- Add Set method to the slider
            slider.Set = function(_, value)
                slider:Set(value)
            end
            
            return slider
        end

        -- Add a textbox (Orion-like syntax)
        function tabWrapper:AddTextbox(options)
            local textbox = tab:CreateInput({
                Name = options.Name,
                PlaceholderText = options.Default or "",
                RemoveTextAfterFocusLost = options.TextDisappear or false,
                Flag = options.Flag or options.Name .. "Textbox",
                Save = options.Save,
                Callback = options.Callback
            })
            
            return textbox
        end

        -- Add a dropdown (Orion-like syntax)
        function tabWrapper:AddDropdown(options)
            local dropdown = tab:CreateDropdown({
                Name = options.Name,
                Options = options.Options,
                CurrentOption = options.Default and {options.Default} or {options.Options[1]},
                MultipleOptions = options.MultipleOptions or false,
                Flag = options.Flag or options.Name .. "Dropdown",
                Save = options.Save,
                Callback = function(selectedOptions)
                    -- Orion passes the selected option, not a table
                    if options.Callback then
                        if type(selectedOptions) == "table" and #selectedOptions > 0 then
                            options.Callback(selectedOptions[1])
                        else
                            options.Callback(selectedOptions)
                        end
                    end
                end
            })
            
            -- Add Set and Refresh methods to the dropdown
            dropdown.Set = function(_, value)
                if type(value) == "string" then
                    dropdown:Set({value})
                else
                    dropdown:Set(value)
                end
            end
            
            dropdown.Refresh = function(_, options, deleteOptions)
                -- Need to implement this to match Orion's API
                dropdown:Refresh(options, deleteOptions)
            end
            
            return dropdown
        end

        -- Add a keybind (Orion-like syntax)
        function tabWrapper:AddBind(options)
            local keybind = tab:CreateKeybind({
                Name = options.Name,
                CurrentKeybind = options.Default or "E",
                HoldToInteract = options.Hold or false,
                Flag = options.Flag or options.Name .. "Keybind",
                Save = options.Save,
                Callback = options.Callback
            })
            
            -- Add Set method to the keybind
            keybind.Set = function(_, value)
                keybind:Set(value) 
            end
            
            return keybind
        end

        -- Add a label (Orion-like syntax)
        function tabWrapper:AddLabel(text)
            local label = tab:CreateLabel(text)
            
            -- Add Set method to the label
            label.Set = function(_, newText)
                label:Set(newText)
            end
            
            return label
        end

        -- Add a paragraph (Orion-like syntax)
        function tabWrapper:AddParagraph(title, content)
            local paragraph = tab:CreateParagraph({
                Title = title,
                Content = content
            })
            
            -- Add Set method to the paragraph
            paragraph.Set = function(_, newTitle, newContent)
                paragraph:Set({Title = newTitle, Content = newContent})
            end
            
            return paragraph
        end

        -- Add a color picker (Orion-like syntax)
        function tabWrapper:AddColorpicker(options)
            local colorPicker = tab:CreateColorPicker({
                Name = options.Name,
                Color = options.Default or Color3.fromRGB(255, 255, 255),
                Flag = options.Flag or options.Name .. "ColorPicker",
                Save = options.Save,
                Callback = options.Callback
            })
            
            -- Add Set method to the color picker
            colorPicker.Set = function(_, color)
                colorPicker:Set(color)
            end
            
            return colorPicker
        end

        return tabWrapper
    end

    return windowWrapper
end

-- Initialize Rayfield (Orion-like syntax)
function OrionToRayfield:Init()
    -- Nothing needed here as Rayfield initializes when creating the window
end

-- Notify the user (Orion-like syntax)
function OrionToRayfield:MakeNotification(options)
    Rayfield:Notify({
        Title = options.Name or "Notification",
        Content = options.Content,
        Duration = options.Time or 5,
        Image = 4483362458
    })
end

-- Destroy the UI (Orion-like syntax)
function OrionToRayfield:Destroy()
    Rayfield:Destroy()
end

-- Access to flags (Orion-like syntax)
OrionToRayfield.Flags = Rayfield.Flags

return OrionToRayfield
