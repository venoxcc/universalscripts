--[[ old ass source... ignore the code lmfao ]]

local function loader(start_time, end_time, success2, response2)
    local logo = [[
        Welcome to 
        ____   ____                            __      __      ___.   .__                   __     ___________           .__          
        \   \ /   /____   ____   _______  ___ /  \    /  \ ____\_ |__ |  |__   ____   ____ |  | __ \__    ___/___   ____ |  |   ______
         \   Y   // __ \ /    \ /  _ \  \/  / \   \/\/   // __ \| __ \|  |  \ /  _ \ /  _ \|  |/ /   |    | /  _ \ /  _ \|  |  /  ___/
          \     /\  ___/|   |  (  <_> >    <   \        /\  ___/| \_\ \   Y  (  <_> |  <_> )    <    |    |(  <_> |  <_> )  |__\___ \ 
           \___/  \___  >___|  /\____/__/\_ \   \__/\  /  \___  >___  /___|  /\____/ \____/|__|_ \   |____| \____/ \____/|____/____  >
                      \/     \/            \/        \/       \/    \/     \/                   \/                                 \/ 
        ]]
        coroutine.wrap(function()
            print("üöÄ | Authenticating...")
            wait(3)
            print("Successfully authenticated!")
            print("üîÉ | Loading Venox Webhook Tools...")
            wait(4)
            local load_time_ms = (end_time - start_time) * 1000
            if success2 then
                local message = string.format("‚úÖ | Venox Webhook Tools loaded in %.2f ms\n\n", load_time_ms)
                print(message..logo)
            else
                local message = string.format("‚ùå | Venox Webhook Tools failed to load. Error: %s\n", response2)
                print(message)
            end
        end)()
end

local start_time, end_time, success2, response2

local function runScript()
    start_time = os.clock() 
    success2, response2 = pcall(function()
    
        
getgenv().config = {
    webhook = {
        url = "",
        message = "",
        delayspeed = "", 
        loadscript = ""
    }
}
getgenv().Embedconfig = {
    builder = {
        url = "",
        content = "",
        title = "", 
        description = "",
        color = "",
        fieldTitle = "",
        fieldcontent = "",
        thumbnailImage = "",
        footer = ""
    }
}

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Venox Webhook Tools | v1.0.2",
    SubTitle = "by venox.w#0",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl

})

local Tabs = {
    WebhookSend = Window:AddTab({ Title = "Webhook Send", Icon = "" }),
    WebhookEmbed = Window:AddTab({ Title = "Webhook Embed Build", Icon = "" }),
    WebhookCheck = Window:AddTab({ Title = "Webhook Checker", Icon = "" }),
    WebhookDelete = Window:AddTab({ Title = "Webhook Deleter", Icon = "" }),
    WebhookDetect = Window:AddTab({ Title = "Script Webhook Spy", Icon = "" }),
    Changelog = Window:AddTab({ Title = "Changelog", Icon = "" })
}


--Webhook Send
Tabs.WebhookSend:AddParagraph({
    Title = "Important Info!",
    Content = "Please Report any Issues or Bugs to venox.w#0000!"
})

Tabs.WebhookSend:AddSection("Webhook Config Section")
local WebhookInput1 = Tabs.WebhookSend:AddInput("Input", {
    Title = "Webhook URL",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "https://discord.com/api/webhooks/x/x",
    Callback = function(Value)
        getgenv().config.webhook.url = Value
    end
})
local WebhookMessage = Tabs.WebhookSend:AddInput("Input", {
    Title = "Message",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Hello @everyone",
    Callback = function(Value)
        getgenv().config.webhook.message = Value
    end
})

Tabs.WebhookSend:AddSection("Webhook Send Section")

Tabs.WebhookSend:AddButton({
    Title = "Send Single Message!(Console Status)",
    Description = "Sends a Single Message",
    Callback = function()
        local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
        local contentmessage = config.webhook.message
        local message = game:GetService('HttpService'):JSONEncode({content = contentmessage})
        local url = config.webhook.url
        local abcdef = {Url = url, Body = message, Method = "POST", Headers = { ['Content-Type'] = 'application/json' }}
        local success, response = pcall(request, abcdef)
        
        if success and response.Success then
            print("\u{1F7E2} [Green]", "Webhook sent successfully")
        else
            warn("\u{1F534} [Error404]", "Webhook sent failed! (Webhook maybe got deleted!) ")
        end
    end
})

Tabs.WebhookSend:AddSection("Webhook Spam Section")


local SpamSpeedDropdown = Tabs.WebhookSend:AddDropdown("Dropdown", {
    Title = "Send Delay (seconds)",
    Description = "Select Spam Delay/Speed",
    Values = {"0.1", "0.25", "0.5", "0.75", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5"},
    Multi = false,
    Default = 5,
})
SpamSpeedDropdown:OnChanged(function(Value)
    getgenv().config.webhook.delayspeed = Value
    Fluent:Notify({
        Title = "Venox Hub",
        Content = "Delay Selected: ".. Value,
        SubContent = "",
        Duration = 5
    })
end)

local SendToggle = Tabs.WebhookSend:AddToggle("MyToggle", {Title = "Start Sending (Console Status)", Default = false })
getgenv().spam = false
function webhookspam() 
    coroutine.wrap(function()
        while getgenv().spam do
            local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
            local contentmessage = config.webhook.message
            local message = game:GetService('HttpService'):JSONEncode({content = contentmessage})
            local url = config.webhook.url
            local abcdef = {Url = url, Body = message, Method = "POST", Headers = { ['Content-Type'] = 'application/json' }}
            local success, response = pcall(request, abcdef)
            
            if success and response.Success then
                print("\u{1F7E2} [Green]", "Webhook sent successfully")
            else
                warn("\u{1F534} [Error404]", "Webhook sent failed! (Webhook may have been deleted)")
            end
    
            wait(1)
        end
    end)()
end


SendToggle:OnChanged(function(Value)
    getgenv().spam = Value
    if Value then
        webhookspam()
        Fluent:Notify({
            Title = "Venox Hub",
            Content = "Spam turned on! (check console for status!)",
            SubContent = "",
            Duration = 5
        })
    else
        Fluent:Notify({
            Title = "Venox Hub",
            Content = "Spam turned off!",
            SubContent = "",
            Duration = 5
        })
    end
end)

--Embed
Tabs.WebhookEmbed:AddSection("Embed Builder Section")
local EmbedInfo = Tabs.WebhookEmbed:AddParagraph({
    Title = "Embed Builder Help",
    Content = "Make script block:  ``` script  ```\n" ..
              "Make Text bold: **Text**\n" ..
              "Make Text italic: *Text*\n" ..
              "Make Text underline: __Text__\n" ..
              "Make Text strikethrough: ~~Text~~\n" ..
              "Make Text bold and italic: ***Text***\n" ..
              "Make new line: \\n\n" ..
              "Mention user: <@USER_ID>\n" ..
              "Mention role: <@&ROLE_ID>\n" ..
              "Insert Emoji: :emoji_name:\n" ..
              "Add inline code: `code`\n" ..
              "Display a code block with syntax highlighting: ```lua\n-- Lua code here\n```\n" ..
              "Create a hyperlink: [Link Text](URL)\n" ..
              "Make a Quote Text: > Quoted text\n"
})



function createEmbed()
    local url = Embedconfig.builder.url
    local data = {
        ["content"] = Embedconfig.builder.content,
        ["embeds"] = {
            {
                ["title"] = Embedconfig.builder.title,
                ["description"] = Embedconfig.builder.description,
                ["type"] = "rich",
                ["color"] = tonumber(0x7269da),
                ["fields"] = {
                    {
                        ["name"] = Embedconfig.builder.fieldTitle,
                        ["value"] = Embedconfig.builder.fieldcontent,
                    }
                },
                ["thumbnail"] = {
                    ["url"] = Embedconfig.builder.thumbnailImage,
                },
                ["footer"] = {
                    ["text"] = Embedconfig.builder.footer
                }
            }
        }
    }
    local newdata = game:GetService("HttpService"):JSONEncode(data)
    local headers = {
        ["content-type"] = "application/json"
    }
    request = http_request or request or HttpPost or syn.request
    local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
    request(abcdef)
end

function generateEmbedFunctionString()
    local url = getgenv().Embedconfig.builder.url
    local content = getgenv().Embedconfig.builder.content
    local title = getgenv().Embedconfig.builder.title
    local description = getgenv().Embedconfig.builder.description
    local fieldTitle = getgenv().Embedconfig.builder.fieldTitle
    local fieldContent = getgenv().Embedconfig.builder.fieldcontent
    local thumbnailImage = getgenv().Embedconfig.builder.thumbnailImage
    local footer = getgenv().Embedconfig.builder.footer

    local embedFunctionString = string.format([[
function createEmbed()
    local url = "%s"
    local data = {
        ["content"] = "%s",
        ["embeds"] = {
            {
                ["title"] = "%s",
                ["description"] = "%s",
                ["type"] = "rich",
                ["color"] = tonumber(0x7269da),
                ["fields"] = {
                    {
                        ["name"] = "%s",
                        ["value"] = "%s",
                    }
                },
                ["thumbnail"] = {
                    ["url"] = "%s",
                },
                ["footer"] = {
                    ["text"] = "%s"
                }
            }
        }
    }
    local newdata = game:GetService("HttpService"):JSONEncode(data)
    local headers = {
        ["content-type"] = "application/json"
    }
    request = http_request or request or HttpPost or syn.request
    local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
    request(abcdef)
end
]], url, content, title, description, fieldTitle, fieldContent, thumbnailImage, footer)

    return embedFunctionString
end


local WebhookEmbedURL = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Webhook URL",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "https://discord.com/api/webhooks/x/x",
    Callback = function(Value)
        getgenv().Embedconfig.builder.url = Value
    end
})
local WebhookEmbedContent = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Bot Message",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "@everyone ",
    Callback = function(Value)
        getgenv().Embedconfig.builder.content = Value
    end
})
local WebhookEmbedTitle = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Title",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Embed Title",
    Callback = function(Value)
        getgenv().Embedconfig.builder.title = Value
    end
})
local WebhookEmbedDescription = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Description",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Embed Description",
    Callback = function(Value)
        getgenv().Embedconfig.builder.description = Value
    end
})

local WebhookEmbedField = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Field Title",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Field Title",
    Callback = function(Value)
        getgenv().Embedconfig.builder.fieldTitle = Value
    end
})
local WebhookEmbedField2 = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Field Content",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Field Content",
    Callback = function(Value)
        getgenv().Embedconfig.builder.fieldcontent = Value
    end
})
local WebhookEmbedFooter = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Footer",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Footer Text",
    Callback = function(Value)
        getgenv().Embedconfig.builder.footer = Value
    end
})
local WebhookEmbedImage = Tabs.WebhookEmbed:AddInput("Input", {
    Title = "Thumbnail Image URL",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "https://cdn.discordapp.com",
    Callback = function(Value)
        getgenv().Embedconfig.builder.thumbnailImage = Value
    end
})


Tabs.WebhookEmbed:AddButton({
    Title = "Create and Test Embed!",
    Description = "Testing the Embed",
    Callback = function()
        createEmbed()
        Fluent:Notify({
            Title = "Venox Hub",
            Content = "Embed Created and sent!",
            SubContent = "",
            Duration = 5
        })
    end
})


Tabs.WebhookEmbed:AddButton({
    Title = "Copy Embed Script",
    Description = "Copy Embed code",
    Callback = function()
        local embedFunctionString = generateEmbedFunctionString()
        setclipboard(embedFunctionString)
        Fluent:Notify({
            Title = "Venox Hub",
            Content = "Embed Code Copied! ",
            SubContent = "",
            Duration = 5
        })
    end
})

-- Webhook Checker
local WebhookStatus = Tabs.WebhookCheck:AddParagraph({
    Title = "Webhook checker!",
    Content = "Checks if a Webhook is valid or not\nNeed to Type full URL including either https:// or http://\nInvalid Protocol means your Link doesnt include http/s:// "
})
local WebhookInput = Tabs.WebhookCheck:AddInput("Input", {
    Title = "Webhook URL",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "https://discord.com/api/webhooks/x/x",
    Callback = function(Value)
        getgenv().config.webhook.url = Value
    end
})

Tabs.WebhookCheck:AddButton({
    Title = "Check Webhook!",
    Description = "Check if Webhook is valid or not",
    Callback = function()

        local function checkWebhook(url)
            local response = game:HttpGet(url)
            if response == "" or response:lower():find("error") then
                Fluent:Notify({
                    Title = "Venox Hub",
                    Content = "Webhook Invalid!",
                    SubContent = "",
                    Duration = 5
                })
            else
                Fluent:Notify({
                    Title = "Venox Hub",
                    Content = "Webhook is Valid!",
                    SubContent = "",
                    Duration = 5
                })
            end
        end
        checkWebhook(config.webhook.url)
    end
})


--Webhook Deleter
local WebhookDeleteParagraph = Tabs.WebhookDelete:AddParagraph({
    Title = "Webhook Deleter!",
    Content = "Checks if a Webhook is valid or not and then Delete's It!\nKeep in Mind so input whole link including http/s!"
})
local WebhookDeleteInput = Tabs.WebhookDelete:AddInput("Input", {
    Title = "Webhook URL",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "https://discord.com/api/webhooks/x/x",
    Callback = function(Value)
        getgenv().config.webhook.url = Value
    end
})

Tabs.WebhookDelete:AddButton({
    Title = "Delete Webhook!",
    Description = "Delete's the Webhook",
    Callback = function()


        local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)


        local function checkWebhook(url)
            local response = game:HttpGet(url)
            if response == "" or response:lower():find("error") then
                return false
            else
                return true
            end
        end
        
        local function deleteWebhook(url)
            if not checkWebhook(url) then
                Fluent:Notify({
                    Title = "Venox Hub",
                    Content = "Webhook is Valid, Cancelled Deletion!",
                    SubContent = "",
                    Duration = 5
                })
                return
            end
        
            local success, response = pcall(request, {
                Url = url,
                Method = "DELETE"
            })
        
            if success then
                if response and response ~= "" then
                    Fluent:Notify({
                        Title = "Venox Hub",
                        Content = "Webhook deleted successfully!",
                        SubContent = "",
                        Duration = 5
                    })
                else
                    Fluent:Notify({
                        Title = "Venox Hub",
                        Content = "Webhook deletion failed!",
                        SubContent = "",
                        Duration = 5
                    })
                end
            else
                Fluent:Notify({
                    Title = "Venox Hub",
                    Content = "Error".. response,
                    SubContent = "",
                    Duration = 5
                })
            end
        end
        
        deleteWebhook(config.webhook.url)

    end
})

-- Enhanced Script webhook detect
local WebhookDetectPara = Tabs.WebhookDetect:AddParagraph({
    Title = "Enhanced HTTP Request & Webhook Spy",
    Content = "Execute Script and monitor ALL HTTP requests\nWebhooks are highlighted automatically\nContinuous monitoring with smart detection"
})

local WebhookInput1 = Tabs.WebhookDetect:AddInput("Input", {
    Title = "Script",
    Default = "",
    Numeric = false,
    Finished = false,
    Placeholder = "Paste/Type Script Here",
    Callback = function(Value)
        getgenv().config.webhook.loadscript = Value
    end
})

-- Enhanced monitoring system
local httpreq = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
local originalHTTPReq = httpreq
local httphook
local isHooked = false
local monitoringActive = false
local requestsFound = {}
local webhooksFound = {}
local monitorStartTime = 0
local MONITORING_DURATION = 15 -- Monitor for 15 seconds after script execution

-- Webhook detection patterns
local webhookPatterns = {
    "discord%.com/api/webhooks",
    "discordapp%.com/api/webhooks", 
    "webhook",
    "hooks%.discord%.com",
    "ptb%.discord%.com/api/webhooks",
    "canary%.discord%.com/api/webhooks"
}

-- Function to check if URL is a webhook
local function isWebhookURL(url)
    if not url then return false end
    url = string.lower(url)
    
    for _, pattern in ipairs(webhookPatterns) do
        if string.match(url, pattern) then
            return true
        end
    end
    return false
end

-- Function to categorize and format request info
local function formatRequestInfo(url, method, data)
    local isWebhook = isWebhookURL(url)
    local requestType = method or "GET"
    local timestamp = os.date("%H:%M:%S")
    
    local info = {
        url = url,
        method = requestType,
        timestamp = timestamp,
        isWebhook = isWebhook,
        hasData = data and #tostring(data) > 0
    }
    
    return info
end

-- Enhanced monitoring function
local function startMonitoring()
    if isHooked then return end
    
    print("üîç Starting Enhanced HTTP Monitor...")
    print("‚è±Ô∏è Monitoring Duration: " .. MONITORING_DURATION .. " seconds")
    print("üéØ Tracking: ALL HTTP requests + Webhook highlighting")
    print("-" .. string.rep("-", 50))
    
    requestsFound = {}
    webhooksFound = {}
    monitoringActive = true
    monitorStartTime = tick()
    
    httphook = hookfunction(httpreq, function(requestData, ...)
        if monitoringActive and requestData and requestData.Url then
            local info = formatRequestInfo(requestData.Url, requestData.Method, requestData.Body)
            
            -- Add to appropriate lists
            table.insert(requestsFound, info)
            if info.isWebhook then
                table.insert(webhooksFound, info)
                setclipboard(info.url) -- Auto-copy webhook URLs
            end
            
            -- Real-time logging
            local prefix = info.isWebhook and "üö® WEBHOOK" or "üì° REQUEST"
            local methodInfo = info.method ~= "GET" and " [" .. info.method .. "]" or ""
            
            print(string.format("%s [%s]%s: %s", 
                prefix, info.timestamp, methodInfo, info.url))
            
            if info.isWebhook then
                print("   ‚úÖ Webhook URL copied to clipboard!")
            end
        end
        
        return originalHTTPReq(requestData, ...)
    end)
    
    isHooked = true
end

-- Function to stop monitoring and show results
local function stopMonitoring()
    if not isHooked then return end
    
    monitoringActive = false
    httphook = hookfunction(httpreq, originalHTTPReq)
    isHooked = false
    
    print("-" .. string.rep("-", 50))
    print("üìä MONITORING COMPLETE - RESULTS:")
    print("-" .. string.rep("-", 50))
    
    -- Summary
    print(string.format("üìà Total Requests Found: %d", #requestsFound))
    print(string.format("üéØ Webhooks Found: %d", #webhooksFound))
    
    if #webhooksFound > 0 then
        print("\nüö® WEBHOOK DETAILS:")
        for i, webhook in ipairs(webhooksFound) do
            print(string.format("  %d. [%s] %s %s", 
                i, 
                webhook.timestamp, 
                webhook.method,
                webhook.url
            ))
        end
        print("\n‚úÖ Latest webhook URL copied to clipboard!")
        if webhooksFound[#webhooksFound] then
            setclipboard(webhooksFound[#webhooksFound].url)
        end
    end
    
    if #requestsFound > 0 and #requestsFound > #webhooksFound then
        print("\nüì° OTHER REQUESTS:")
        local otherCount = 0
        for _, req in ipairs(requestsFound) do
            if not req.isWebhook then
                otherCount = otherCount + 1
                if otherCount <= 5 then -- Show max 5 other requests
                    print(string.format("  ‚Ä¢ [%s] %s %s", 
                        req.timestamp, 
                        req.method, 
                        req.url
                    ))
                end
            end
        end
        if otherCount > 5 then
            print(string.format("  ... and %d more requests", otherCount - 5))
        end
    end
    
    if #requestsFound == 0 then
        print("‚ùå No HTTP requests detected")
        print("üí° Try: Script might not make requests immediately")
        print("üí° Try: Execute script and interact with it (press keys, click, etc.)")
    end
    
    print(string.rep("-", 60))
end

-- Auto-monitoring coroutine
local function autoMonitorCoroutine()
    while monitoringActive do
        wait(0.1)
        if tick() - monitorStartTime >= MONITORING_DURATION then
            stopMonitoring()
            break
        end
    end
end

-- Main execution function
function onClickButton()
    -- Initialize
    getgenv().up = "print('Enhanced Webhook Spy v2.0 - Monitoring Active')"
    local code2 = tostring(getgenv().up)
    loadstring(code2)()
    
    -- Start monitoring BEFORE executing script
    startMonitoring()
    
    -- Execute the target script
    print("üöÄ Executing target script...")
    local code = tostring(getgenv().config.webhook.loadscript)
    
    -- Protected execution
    local success, error = pcall(function()
        loadstring(code)()
    end)
    
    if not success then
        print("‚ùå Script execution error: " .. tostring(error))
    else
        print("‚úÖ Script executed successfully")
    end
    
    print("‚è≥ Continuing to monitor for " .. MONITORING_DURATION .. " seconds...")
    print("üí° Interact with the script if needed (keys, clicks, etc.)")
    
    -- Start auto-monitoring coroutine
    coroutine.wrap(autoMonitorCoroutine)()
end

-- Manual stop button
Tabs.WebhookDetect:AddButton({
    Title = "‚èπÔ∏è Stop Monitoring Early",
    Description = "Stop monitoring and show results immediately",
    Callback = function()
        if monitoringActive then
            stopMonitoring()
            Fluent:Notify({
                Title = "Webhook Spy",
                Content = "Monitoring stopped - Check console!",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Webhook Spy",
                Content = "No active monitoring session",
                Duration = 3
            })
        end
    end
})

-- Main execution button
Tabs.WebhookDetect:AddButton({
    Title = "üïµÔ∏è Start Enhanced Monitoring",
    Description = "Execute script with advanced HTTP monitoring",
    Callback = function()
        if monitoringActive then
            Fluent:Notify({
                Title = "Webhook Spy",
                Content = "Monitoring already active!",
                Duration = 3
            })
            return
        end
        
        Window:Dialog({
            Title = "Enhanced Webhook Spy",
            Content = "This will:\n‚Ä¢ Execute your script\n‚Ä¢ Monitor ALL HTTP requests for " .. MONITORING_DURATION .. "s\n‚Ä¢ Highlight webhooks automatically\n‚Ä¢ Copy webhook URLs to clipboard",
            Buttons = {
                {
                    Title = "Start Monitoring",
                    Callback = function()
                        Fluent:Notify({
                            Title = "Enhanced Webhook Spy",
                            Content = "Monitoring started - Check console!",
                            SubContent = "Duration: " .. MONITORING_DURATION .. "s", 
                            Duration = 5 
                        })
                        onClickButton()
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        Fluent:Notify({
                            Title = "Webhook Spy",
                            Content = "Monitoring cancelled",
                            Duration = 3
                        })
                    end
                }
            }
        })
    end
})

-- Status display
Tabs.WebhookDetect:AddParagraph({
    Title = "Status Info",
    Content = "‚Ä¢ Monitors ALL HTTP requests (not just webhooks)\n‚Ä¢ Webhooks are automatically highlighted with üö®\n‚Ä¢ Continues monitoring for " .. MONITORING_DURATION .. " seconds after script execution\n‚Ä¢ Auto-copies webhook URLs to clipboard\n‚Ä¢ Shows real-time request detection"
})
-- Changelog



Tabs.Changelog:AddButton({
    Title = "Join Discord for bug report!",
    Description = "copy discord link",
    Callback = function()
        Window:Dialog({
            Title = "Copy Discord Link?",
            Content = "Join my Discord Server",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        setclipboard("https://discord.gg/X4Rhrzemyq")
                        Fluent:Notify({
                            Title = "Venox Hub",
                            Content = "Copied Invite Link",
                            SubContent = "", 
                            Duration = 5 
                        })
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        Fluent:Notify({
                            Title = "Venox Hub",
                            Content = "U dont wanna join my discord? :/",
                            SubContent = "", 
                            Duration = 5 
                        })
                    end
                }
            }
        })
    end
})
Tabs.Changelog:AddParagraph({
    Title = "Update Changelog!",
    Content = "[v1.0.2] Updated Spy Output\n"..
              "- Added new better Webhook Spy Console Output\n"..
              "[v1.0.1] New Update\n"..
              "- Added Script HTTP/Webhook Spy\n"..
              "[v1.0.0] Release- 04-27-2024\n" ..
              "- Venox Discord Tools with the following features:\n" ..
              "- Webhook Deleter.  \n" ..
              "- Webhook Checker. \n" ..
              "- Webhook Sender. \n" ..
              "- Webhook Embed Builder"
})




    end)
    end_time = os.clock() 
    loader(start_time, end_time, success2, response2)
end

runScript()
